{"version":3,"sources":["contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/sandwich.jpg","App.js","reportWebVitals.js","index.js","utils/marketplace.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","useState","setName","image","setImage","description","setDescription","price","setPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","Product","product","buyProduct","deleteProduct","sold","appId","owner","count","setCount","Col","Card","Badge","bg","objectFit","Text","min","max","Number","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Products","fetchBalance","products","setProducts","loading","setLoading","getProducts","a","getProductsAction","then","catch","error","console","log","finally","_","useEffect","data","createProductAction","toast","buyProductAction","deleteProductAction","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","marketplaceNote","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","buyArg","countArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"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","file":"static/js/main.69925209.chunk.js","sourcesContent":["export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l8\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l7\\ntxna ApplicationArgs 0\\nbyte \\\"buy\\\"\\n==\\nbnz main_l4\\nerr\\nmain_l4:\\nglobal GroupSize\\nint 2\\n==\\ngtxn 1 TypeEnum\\nint pay\\n==\\ngtxn 1 Receiver\\nglobal CreatorAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"PRICE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n*\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\n&&\\nbnz main_l6\\nint 0\\nreturn\\nmain_l6:\\nbyte \\\"SOLD\\\"\\nbyte \\\"SOLD\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l8:\\ntxn NumAppArgs\\nint 4\\n==\\nassert\\ntxn Note\\nbyte \\\"tutorial-marketplace:uv1\\\"\\n==\\nassert\\ntxna ApplicationArgs 3\\nbtoi\\nint 0\\n>\\nassert\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"DESCRIPTION\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 3\\nbtoi\\napp_global_put\\nbyte \\\"SOLD\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({name, coverImg, connect}) => {\n    return (\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n            <div className=\"mt-auto text-light mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{maxWidth: \"320px\"}}\n                >\n                    <img src={coverImg} alt=\"\"/>\n                </div>\n                <h1>{name}</h1>\n                <p>Please connect your wallet to continue.</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-light\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Connect Wallet\n                </Button>\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;\n","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;\n","import React, {useCallback, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Button, FloatingLabel, Form, Modal} from \"react-bootstrap\";\nimport {stringToMicroAlgos} from \"../../utils/conversions\";\n\nconst AddProduct = ({createProduct}) => {\n    const [name, setName] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(0);\n\n    const isFormFilled = useCallback(() => {\n        return name && image && description && price > 0\n    }, [name, image, description, price]);\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button\n                onClick={handleShow}\n                variant=\"dark\"\n                className=\"rounded-pill px-0\"\n                style={{width: \"38px\"}}\n            >\n                <i className=\"bi bi-plus\"></i>\n            </Button>\n            <Modal show={show} onHide={handleClose} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>New Product</Modal.Title>\n                </Modal.Header>\n                <Form>\n                    <Modal.Body>\n                        <FloatingLabel\n                            controlId=\"inputName\"\n                            label=\"Product name\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                onChange={(e) => {\n                                    setName(e.target.value);\n                                }}\n                                placeholder=\"Enter name of product\"\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputUrl\"\n                            label=\"Image URL\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Image URL\"\n                                value={image}\n                                onChange={(e) => {\n                                    setImage(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Description\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"description\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setDescription(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputPrice\"\n                            label=\"Price in ALGO\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Price\"\n                                onChange={(e) => {\n                                    setPrice(stringToMicroAlgos(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel>\n                    </Modal.Body>\n                </Form>\n                <Modal.Footer>\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"dark\"\n                        disabled={!isFormFilled()}\n                        onClick={() => {\n                            createProduct({\n                                name,\n                                image,\n                                description,\n                                price\n                            });\n                            handleClose();\n                        }}\n                    >\n                        Save product\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nAddProduct.propTypes = {\n    createProduct: PropTypes.func.isRequired,\n};\n\nexport default AddProduct;\n","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\n\nconst Product = ({address, product, buyProduct, deleteProduct}) => {\n    const {name, image, description, price, sold, appId, owner} =\n        product;\n\n    const [count, setCount] = useState(1)\n\n    return (\n        <Col key={appId}>\n            <Card className=\"h-100\">\n                <Card.Header>\n                    <Stack direction=\"horizontal\" gap={2}>\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\n                        <Identicon size={28} address={owner}/>\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\n                            {sold} Sold\n                        </Badge>\n                    </Stack>\n                </Card.Header>\n                <div className=\"ratio ratio-4x3\">\n                    <img src={image} alt={name} style={{objectFit: \"cover\"}}/>\n                </div>\n                <Card.Body className=\"d-flex flex-column text-center\">\n                    <Card.Title>{name}</Card.Title>\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n                    <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n                        <FloatingLabel\n                            controlId=\"inputCount\"\n                            label=\"Count\"\n                            className=\"w-25\"\n                        >\n                            <Form.Control\n                                type=\"number\"\n                                value={count}\n                                min=\"1\"\n                                max=\"10\"\n                                onChange={(e) => {\n                                    setCount(Number(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel>\n                        <Button\n                            variant=\"outline-dark\"\n                            onClick={() => buyProduct(product, count)}\n                            className=\"w-75 py-3\"\n                        >\n                            Buy for {microAlgosToString(price) * count} ALGO\n                        </Button>\n                        {product.owner === address &&\n                            <Button\n                                variant=\"outline-danger\"\n                                onClick={() => deleteProduct(product)}\n                                className=\"btn\"\n                            >\n                                <i className=\"bi bi-trash\"></i>\n                            </Button>\n                        }\n                    </Form>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n};\n\nProduct.propTypes = {\n    address: PropTypes.string.isRequired,\n    product: PropTypes.instanceOf(Object).isRequired,\n    buyProduct: PropTypes.func.isRequired,\n    deleteProduct: PropTypes.func.isRequired\n};\n\nexport default Product;\n","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};\n","import React, {useEffect, useState} from \"react\";\nimport {toast} from \"react-toastify\";\nimport AddProduct from \"./AddProduct\";\nimport Product from \"./Product\";\nimport Loader from \"../utils/Loader\";\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\nimport {buyProductAction, createProductAction, deleteProductAction, getProductsAction,} from \"../../utils/marketplace\";\nimport PropTypes from \"prop-types\";\nimport {Row} from \"react-bootstrap\";\n\nconst Products = ({address, fetchBalance}) => {\n    const [products, setProducts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const getProducts = async () => {\n        setLoading(true);\n        getProductsAction()\n            .then(products => {\n                if (products) {\n                    setProducts(products);\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(_ => {\n                setLoading(false);\n            });\n    };\n\n    useEffect(() => {\n        getProducts();\n    }, []);\n\n    const createProduct = async (data) => {\n        setLoading(true);\n        createProductAction(address, data)\n            .then(() => {\n                toast(<NotificationSuccess text=\"Product added successfully.\"/>);\n                getProducts();\n                fetchBalance(address);\n            })\n            .catch(error => {\n                console.log(error);\n                toast(<NotificationError text=\"Failed to create a product.\"/>);\n                setLoading(false);\n            })\n    };\n\n    const buyProduct = async (product, count) => {\n        setLoading(true);\n        buyProductAction(address, product, count)\n            .then(() => {\n                toast(<NotificationSuccess text=\"Product bought successfully\"/>);\n                getProducts();\n                fetchBalance(address);\n            })\n            .catch(error => {\n                console.log(error)\n                toast(<NotificationError text=\"Failed to purchase product.\"/>);\n                setLoading(false);\n            })\n    };\n\n    const deleteProduct = async (product) => {\n        setLoading(true);\n        deleteProductAction(address, product.appId)\n            .then(() => {\n                toast(<NotificationSuccess text=\"Product deleted successfully\"/>);\n                getProducts();\n                fetchBalance(address);\n            })\n            .catch(error => {\n                console.log(error)\n                toast(<NotificationError text=\"Failed to delete product.\"/>);\n                setLoading(false);\n            })\n    };\n\n    if (loading) {\n        return <Loader/>;\n    }\n    return (\n        <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n                <h1 className=\"fs-4 fw-bold mb-0\">Street Food</h1>\n                <AddProduct createProduct={createProduct}/>\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n                <>\n                    {products.map((product, index) => (\n                        <Product\n                            address={address}\n                            product={product}\n                            buyProduct={buyProduct}\n                            deleteProduct={deleteProduct}\n                            key={index}\n                        />\n                    ))}\n                </>\n            </Row>\n        </>\n    );\n};\n\nProducts.propTypes = {\n    address: PropTypes.string.isRequired,\n    fetchBalance: PropTypes.func.isRequired\n};\n\nexport default Products;\n","export default __webpack_public_path__ + \"static/media/sandwich.2d312449.jpg\";","import React, {useState} from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport {Container, Nav} from \"react-bootstrap\";\nimport Products from \"./components/marketplace/Products\";\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\nimport {Notification} from \"./components/utils/Notifications\";\nimport coverImg from \"./assets/img/sandwich.jpg\"\n\nconst App = function AppWrapper() {\n\n    const [address, setAddress] = useState(null);\n    const [name, setName] = useState(null);\n    const [balance, setBalance] = useState(0);\n\n    const fetchBalance = async (accountAddress) => {\n        indexerClient.lookupAccountByID(accountAddress).do()\n            .then(response => {\n                const _balance = response.account.amount;\n                setBalance(_balance);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    const connectWallet = async () => {\n        myAlgoConnect.connect()\n            .then(accounts => {\n                const _account = accounts[0];\n                setAddress(_account.address);\n                setName(_account.name);\n                fetchBalance(_account.address);\n            }).catch(error => {\n            console.log('Could not connect to MyAlgo wallet');\n            console.error(error);\n        })\n    };\n\n    const disconnect = () => {\n        setAddress(null);\n        setName(null);\n        setBalance(null);\n    };\n\n    return (\n        <>\n            <Notification/>\n            {address ? (\n                <Container fluid=\"md\">\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\n                        <Nav.Item>\n                            <Wallet\n                                address={address}\n                                name={name}\n                                amount={balance}\n                                disconnect={disconnect}\n                                symbol={\"ALGO\"}\n                            />\n                        </Nav.Item>\n                    </Nav>\n                    <main>\n                        <Products address={address} fetchBalance={fetchBalance}/>\n                    </main>\n                </Container>\n            ) : (\n                <Cover name={\"Street Food\"} coverImg={coverImg} connect={connectWallet}/>\n            )}\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from \"algosdk\";\nimport {\n    algodClient,\n    indexerClient,\n    marketplaceNote,\n    minRound,\n    myAlgoConnect,\n    numGlobalBytes,\n    numGlobalInts,\n    numLocalBytes,\n    numLocalInts\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\nimport {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\n\nclass Product {\n    constructor(name, image, description, price, sold, appId, owner) {\n        this.name = name;\n        this.image = image;\n        this.description = description;\n        this.price = price;\n        this.sold = sold;\n        this.appId = appId;\n        this.owner = owner;\n    }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n    let encoder = new TextEncoder();\n    let programBytes = encoder.encode(programSource);\n    let compileResponse = await algodClient.compile(programBytes).do();\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n// CREATE PRODUCT: ApplicationCreateTxn\nexport const createProductAction = async (senderAddress, product) => {\n    console.log(\"Adding product...\")\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Compile programs\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\n    const compiledClearProgram = await compileProgram(clearProgram)\n\n    // Build note to identify transaction later and required app args as Uint8Arrays\n    let note = new TextEncoder().encode(marketplaceNote);\n    let name = new TextEncoder().encode(product.name);\n    let image = new TextEncoder().encode(product.image);\n    let description = new TextEncoder().encode(product.description);\n    let price = algosdk.encodeUint64(product.price);\n\n    let appArgs = [name, image, description, price]\n\n    // Create ApplicationCreateTxn\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\n        from: senderAddress,\n        suggestedParams: params,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        approvalProgram: compiledApprovalProgram,\n        clearProgram: compiledClearProgram,\n        numLocalInts: numLocalInts,\n        numLocalByteSlices: numLocalBytes,\n        numGlobalInts: numGlobalInts,\n        numGlobalByteSlices: numGlobalBytes,\n        note: note,\n        appArgs: appArgs\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get created application id and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['application-index'];\n    console.log(\"Created new app-id: \", appId);\n    return appId;\n}\n\n// BUY PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const buyProductAction = async (senderAddress, product, count) => {\n    console.log(\"Buying product...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Build required app args as Uint8Array\n    let buyArg = new TextEncoder().encode(\"buy\")\n    let countArg = algosdk.encodeUint64(count);\n    let appArgs = [buyArg, countArg]\n\n    // Create ApplicationCallTxn\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        appIndex: product.appId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    // Create PaymentTxn\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: senderAddress,\n        to: product.owner,\n        amount: product.price * count,\n        suggestedParams: params\n    })\n\n    let txnArray = [appCallTxn, paymentTxn]\n\n    // Create group transaction out of previously build transactions\n    let groupID = algosdk.computeGroupID(txnArray)\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n    // Sign & submit the group transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n    console.log(\"Signed group transaction\");\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\n\n    // Wait for group transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n    // Notify about completion\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\n// DELETE PRODUCT: ApplicationDeleteTxn\nexport const deleteProductAction = async (senderAddress, index) => {\n    console.log(\"Deleting application...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Create ApplicationDeleteTxn\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\n        from: senderAddress, suggestedParams: params, appIndex: index,\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get application id of deleted application and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['txn']['txn'].apid;\n    console.log(\"Deleted app-id: \", appId);\n}\n\n// GET PRODUCTS: Use indexer\nexport const getProductsAction = async () => {\n    console.log(\"Fetching products...\")\n    let note = new TextEncoder().encode(marketplaceNote);\n    let encodedNote = Buffer.from(note).toString(\"base64\");\n\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n    let transactionInfo = await indexerClient.searchForTransactions()\n        .notePrefix(encodedNote)\n        .txType(\"appl\")\n        .minRound(minRound)\n        .do();\n    let products = []\n    for (const transaction of transactionInfo.transactions) {\n        let appId = transaction[\"created-application-index\"]\n        if (appId) {\n            // Step 2: Get each application by application id\n            let product = await getApplication(appId)\n            if (product) {\n                products.push(product)\n            }\n        }\n    }\n    console.log(\"Products fetched.\")\n    return products\n}\n\nconst getApplication = async (appId) => {\n    try {\n        // 1. Get application by appId\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\n        if (response.application.deleted) {\n            return null;\n        }\n        let globalState = response.application.params[\"global-state\"]\n\n        // 2. Parse fields of response and return product\n        let owner = response.application.params.creator\n        let name = \"\"\n        let image = \"\"\n        let description = \"\"\n        let price = 0\n        let sold = 0\n\n        const getField = (fieldName, globalState) => {\n            return globalState.find(state => {\n                return state.key === utf8ToBase64String(fieldName);\n            })\n        }\n\n        if (getField(\"NAME\", globalState) !== undefined) {\n            let field = getField(\"NAME\", globalState).value.bytes\n            name = base64ToUTF8String(field)\n        }\n\n        if (getField(\"IMAGE\", globalState) !== undefined) {\n            let field = getField(\"IMAGE\", globalState).value.bytes\n            image = base64ToUTF8String(field)\n        }\n\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\n            description = base64ToUTF8String(field)\n        }\n\n        if (getField(\"PRICE\", globalState) !== undefined) {\n            price = getField(\"PRICE\", globalState).value.uint\n        }\n\n        if (getField(\"SOLD\", globalState) !== undefined) {\n            sold = getField(\"SOLD\", globalState).value.uint\n        }\n\n        return new Product(name, image, description, price, sold, appId, owner)\n    } catch (err) {\n        return null;\n    }\n}\n","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const marketplaceNote = \"tutorial-marketplace:uv1\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 3; // Global variables stored as Bytes: name, description, image\n\nexport const ALGORAND_DECIMALS = 6;"],"sourceRoot":""}